// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// run_ancestry_hmm
Rcpp::List run_ancestry_hmm(const Rcpp::NumericMatrix& sample_matrix, Rcpp::StringVector& cmd_line_options, const int num_options, const Rcpp::NumericMatrix& genetic_data, bool viterbi);
RcppExport SEXP _ancestryhmmR_run_ancestry_hmm(SEXP sample_matrixSEXP, SEXP cmd_line_optionsSEXP, SEXP num_optionsSEXP, SEXP genetic_dataSEXP, SEXP viterbiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type sample_matrix(sample_matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type cmd_line_options(cmd_line_optionsSEXP);
    Rcpp::traits::input_parameter< const int >::type num_options(num_optionsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type genetic_data(genetic_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type viterbi(viterbiSEXP);
    rcpp_result_gen = Rcpp::wrap(run_ancestry_hmm(sample_matrix, cmd_line_options, num_options, genetic_data, viterbi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ancestryhmmR_run_ancestry_hmm", (DL_FUNC) &_ancestryhmmR_run_ancestry_hmm, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ancestryhmmR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
